::~nc

' Loop through all contents in stack Y (which is the parameters stack)
L S y
{

    ' Load the value within register Z (which is set to the current item by the loop) into register A so we can work with it without messing with the item in Z
    $$ a z

    ' If register B is populated, clear register C to prevent double-ups occurring
    * $* b _ - c r

    ' If register B is populated, add the contents of registers A and B together and offload the outcome value into register C
    * $* b _ :+ c a b

    ' If register B is populated, load the value of register C into register B to update register B, so you get a "stringing" effect of additions
    * $* b _ $$ b c

    ' If register B is not populated, load the value from register A into register B, this is to push the first value into register B so the next value can be added onto the first value
    * $/* b _ $$ b a
    
}

' Finally, print the value within stack C (which is the outcome stack) onto the console
@ c